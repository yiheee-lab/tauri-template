name: 'CI/CD Pipeline'

on:
  workflow_dispatch:
    inputs:
      skip-version-check:
        description: 'Skip version check (force build current version)'
        required: false
        type: boolean
        default: false
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  version-check:
    name: 'Version Check & Auto-increment'
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    uses: ./.github/workflows/version-check.yml
    with:
      skip-version-check: ${{ github.event_name == 'workflow_dispatch' && inputs.skip-version-check || false }}

  extract-metadata:
    name: 'Extract Metadata'
    if: always() && (needs.version-check.result == 'skipped' || needs.version-check.outputs.should-proceed == 'true')
    needs: [version-check]
    uses: ./.github/workflows/extract-metadata.yml

  build-windows:
    name: 'Build Windows'
    needs: [version-check, extract-metadata]
    if: always() && (needs.version-check.result == 'skipped' || needs.version-check.outputs.should-proceed == 'true') && needs.extract-metadata.result == 'success'
    permissions:
      contents: write
    uses: ./.github/workflows/build-windows.yml
    with:
      name: ${{ needs.version-check.outputs.name || needs.extract-metadata.outputs.name }}
      version: ${{ needs.version-check.outputs.version || needs.extract-metadata.outputs.version }}

  build-macos:
    name: 'Build macOS'
    needs: [version-check, extract-metadata]
    if: always() && (needs.version-check.result == 'skipped' || needs.version-check.outputs.should-proceed == 'true') && needs.extract-metadata.result == 'success'
    permissions:
      contents: write
    uses: ./.github/workflows/build-macos.yml
    with:
      name: ${{ needs.version-check.outputs.name || needs.extract-metadata.outputs.name }}
      version: ${{ needs.version-check.outputs.version || needs.extract-metadata.outputs.version }}

  build-linux:
    name: 'Build Linux'
    needs: [version-check, extract-metadata]
    if: always() && (needs.version-check.result == 'skipped' || needs.version-check.outputs.should-proceed == 'true') && needs.extract-metadata.result == 'success'
    permissions:
      contents: write
    uses: ./.github/workflows/build-linux.yml
    with:
      name: ${{ needs.version-check.outputs.name || needs.extract-metadata.outputs.name }}
      version: ${{ needs.version-check.outputs.version || needs.extract-metadata.outputs.version }}

  build-android:
    name: 'Build Android'
    needs: [version-check, extract-metadata]
    if: always() && (needs.version-check.result == 'skipped' || needs.version-check.outputs.should-proceed == 'true') && needs.extract-metadata.result == 'success'
    permissions:
      contents: write
    uses: ./.github/workflows/build-android.yml
    with:
      name: ${{ needs.version-check.outputs.name || needs.extract-metadata.outputs.name }}
      version: ${{ needs.version-check.outputs.version || needs.extract-metadata.outputs.version }}

  build-ios:
    name: 'Build iOS'
    needs: [version-check, extract-metadata]
    if: always() && (needs.version-check.result == 'skipped' || needs.version-check.outputs.should-proceed == 'true') && needs.extract-metadata.result == 'success'
    permissions:
      contents: write
    uses: ./.github/workflows/build-ios.yml
    with:
      name: ${{ needs.version-check.outputs.name || needs.extract-metadata.outputs.name }}
      version: ${{ needs.version-check.outputs.version || needs.extract-metadata.outputs.version }}

  build-summary:
    name: 'Build Summary'
    needs: [version-check, extract-metadata, build-windows, build-macos, build-linux, build-android, build-ios]
    runs-on: ubuntu-latest
    if: always() && (needs.version-check.result == 'skipped' || needs.version-check.outputs.should-proceed == 'true')
    outputs:
      success-count: ${{ steps.summary.outputs.success-count }}
      should-release: ${{ steps.summary.outputs.should-release }}
    steps:
      - name: Build Summary
        id: summary
        run: |
          echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Version information
          if [ "${{ needs.version-check.result }}" != "skipped" ]; then
            echo "### 📋 Version Information" >> $GITHUB_STEP_SUMMARY
            echo "- **App Name:** ${{ needs.version-check.outputs.name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Version:** ${{ needs.version-check.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Build results table
          echo "### 🏗️ Build Results" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Status | Artifacts |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|-----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Windows | ${{ needs.build-windows.result == 'success' && '✅ Success' || needs.build-windows.result == 'failure' && '❌ Failed' || needs.build-windows.result == 'cancelled' && '🚫 Cancelled' || '⏭️ Skipped' }} | ${{ needs.build-windows.outputs.artifacts && '📦 Available' || '❌ None' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| macOS | ${{ needs.build-macos.result == 'success' && '✅ Success' || needs.build-macos.result == 'failure' && '❌ Failed' || needs.build-macos.result == 'cancelled' && '🚫 Cancelled' || '⏭️ Skipped' }} | ${{ needs.build-macos.outputs.artifacts && '📦 Available' || '❌ None' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Linux | ${{ needs.build-linux.result == 'success' && '✅ Success' || needs.build-linux.result == 'failure' && '❌ Failed' || needs.build-linux.result == 'cancelled' && '🚫 Cancelled' || '⏭️ Skipped' }} | ${{ needs.build-linux.outputs.artifacts && '📦 Available' || '❌ None' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Android | ${{ needs.build-android.result == 'success' && '✅ Success' || needs.build-android.result == 'failure' && '❌ Failed' || needs.build-android.result == 'cancelled' && '🚫 Cancelled' || '⏭️ Skipped' }} | ${{ needs.build-android.outputs.artifacts && '📦 Available' || '❌ None' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| iOS | ${{ needs.build-ios.result == 'success' && '✅ Success' || needs.build-ios.result == 'failure' && '❌ Failed' || needs.build-ios.result == 'cancelled' && '🚫 Cancelled' || '⏭️ Skipped' }} | ${{ needs.build-ios.outputs.artifacts && '📦 Available' || '❌ None' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Calculate success count and determine if we should release
          SUCCESS_COUNT=$(echo "${{ needs.build-windows.result == 'success' && '1' || '0' }} + ${{ needs.build-macos.result == 'success' && '1' || '0' }} + ${{ needs.build-linux.result == 'success' && '1' || '0' }} + ${{ needs.build-android.result == 'success' && '1' || '0' }} + ${{ needs.build-ios.result == 'success' && '1' || '0' }}" | bc 2>/dev/null || echo "0")
          
          echo "success-count=${SUCCESS_COUNT}" >> $GITHUB_OUTPUT
          
          # Only auto-release if we're on main branch and have successful builds
          if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "$SUCCESS_COUNT" -gt "0" ] && [ "${{ github.event_name }}" = "push" ]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "🚀 Will auto-create release with ${SUCCESS_COUNT} successful build(s)" >> $GITHUB_STEP_SUMMARY
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
          fi
          
          echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          if [ "$SUCCESS_COUNT" -gt "0" ]; then
            echo "- ✅ **${SUCCESS_COUNT}** platform(s) built successfully" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${{ github.event_name }}" = "push" ]; then
              echo "- 🚀 **Auto-release will be created automatically**" >> $GITHUB_STEP_SUMMARY
            else
              echo "- 📦 Download artifacts from the **Actions** tab" >> $GITHUB_STEP_SUMMARY
              echo "- 🚀 Create a release using the **Release** workflow" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- ❌ No successful builds - check individual build logs" >> $GITHUB_STEP_SUMMARY
            echo "- 🔍 Review error messages and fix issues" >> $GITHUB_STEP_SUMMARY
            echo "- 🔄 Re-run failed jobs or push fixes" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Version check summary if applicable
          if [ "${{ needs.version-check.result }}" != "skipped" ] && [ "${{ needs.version-check.outputs.should-proceed }}" = "false" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ⚠️ Version Auto-increment" >> $GITHUB_STEP_SUMMARY
            echo "- Version was automatically incremented due to conflict" >> $GITHUB_STEP_SUMMARY
            echo "- A new CI/CD pipeline should start automatically" >> $GITHUB_STEP_SUMMARY
          fi

  auto-release:
    name: 'Auto Release'
    needs: [version-check, extract-metadata, build-windows, build-macos, build-linux, build-android, build-ios, build-summary]
    runs-on: ubuntu-latest
    if: needs.build-summary.outputs.should-release == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Organize artifacts
        run: |
          mkdir -p ./release-assets
          
          # Function to rename and move artifacts
          rename_artifacts() {
            local platform=$1
            local arch=$2
            local ext=$3
            local source_pattern=$4
            
            for file in ./artifacts/$source_pattern; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                new_name="${{ needs.version-check.outputs.name || needs.extract-metadata.outputs.name }}-${{ needs.version-check.outputs.version || needs.extract-metadata.outputs.version }}-${platform}-${arch}.${ext}"
                cp "$file" "./release-assets/$new_name"
                echo "✅ Renamed: $filename -> $new_name"
              fi
            done
          }
          
          # Windows
          rename_artifacts "windows" "x64" "msi" "windows-*/*.msi"
          rename_artifacts "windows" "x64" "exe" "windows-*/*.exe"
          
          # macOS
          rename_artifacts "macos" "universal" "dmg" "macos-*/*.dmg"
          rename_artifacts "macos" "x64" "app.tar.gz" "macos-x64-*/*.app.tar.gz"
          rename_artifacts "macos" "arm64" "app.tar.gz" "macos-arm64-*/*.app.tar.gz"
          
          # Linux
          rename_artifacts "linux" "x64" "deb" "linux-*/*.deb"
          rename_artifacts "linux" "x64" "rpm" "linux-*/*.rpm"
          rename_artifacts "linux" "x64" "AppImage" "linux-*/*.AppImage"
          
          # Android
          rename_artifacts "android" "universal" "apk" "android-*/*.apk"
          rename_artifacts "android" "universal" "aab" "android-*/*.aab"
          
          # iOS
          rename_artifacts "ios" "universal" "ipa" "ios-*/*.ipa"
          
          # List all release assets
          echo "📦 Release Assets:"
          ls -la ./release-assets/ || echo "No artifacts found"

      - name: Create Release Tag and GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          APP_NAME="${{ needs.version-check.outputs.name || needs.extract-metadata.outputs.name }}"
          VERSION="${{ needs.version-check.outputs.version || needs.extract-metadata.outputs.version }}"
          TAG="v${VERSION}"
          
          echo "🏷️ Creating release: ${TAG}"
          
          # Create release notes
          cat > release_notes.md << EOF
          ## 🚀 Release ${APP_NAME} v${VERSION}
          
          **Auto-generated release from CI/CD pipeline**
          
          ### 📋 Build Status
          | Platform | Status |
          |----------|--------|
          | Windows | ${{ needs.build-windows.result == 'success' && '✅ Success' || '❌ Failed' }} |
          | macOS | ${{ needs.build-macos.result == 'success' && '✅ Success' || '❌ Failed' }} |
          | Linux | ${{ needs.build-linux.result == 'success' && '✅ Success' || '❌ Failed' }} |
          | Android | ${{ needs.build-android.result == 'success' && '✅ Success' || '❌ Failed' }} |
          | iOS | ${{ needs.build-ios.result == 'success' && '✅ Success' || '❌ Failed' }} |
          
          ### 📥 Download
          Choose the appropriate file for your platform and architecture.
          
          **File naming convention:** \`name-version-platform-architecture.extension\`
          
          ### 🔧 Installation
          - **Windows**: Download and run the \`.msi\` or \`.exe\` file
          - **macOS**: Download and open the \`.dmg\` file
          - **Linux**: Download the \`.deb\`, \`.rpm\`, or \`.AppImage\` file
          - **Android**: Download and install the \`.apk\` file
          - **iOS**: Download the \`.ipa\` file (requires developer account for installation)
          
          ### 📝 Changes
          This release was automatically generated from commit: \`${{ github.sha }}\`
          
          **Commit message:** ${{ github.event.head_commit.message }}
          EOF
          
          # Create the release
          gh release create "${TAG}" \
            --title "${APP_NAME} v${VERSION}" \
            --notes-file release_notes.md \
            --draft=false \
            --prerelease=${{ contains(needs.extract-metadata.outputs.version, 'beta') || contains(needs.extract-metadata.outputs.version, 'alpha') || contains(needs.extract-metadata.outputs.version, 'rc') }} \
            ./release-assets/* || true
          
          echo "🎉 Release ${TAG} created successfully!"

      - name: Release Summary
        run: |
          APP_NAME="${{ needs.version-check.outputs.name || needs.extract-metadata.outputs.name }}"
          VERSION="${{ needs.version-check.outputs.version || needs.extract-metadata.outputs.version }}"
          TAG="v${VERSION}"
          
          echo "## 🎉 Auto-Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** ${APP_NAME} v${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${TAG}" >> $GITHUB_STEP_SUMMARY
          echo "**Successful Builds:** ${{ needs.build-summary.outputs.success-count }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [📋 View Release](https://github.com/${{ github.repository }}/releases/tag/${TAG})" >> $GITHUB_STEP_SUMMARY
          echo "- [📦 Download Assets](https://github.com/${{ github.repository }}/releases/tag/${TAG})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Assets" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -la ./release-assets/ >> $GITHUB_STEP_SUMMARY || echo "No assets" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY