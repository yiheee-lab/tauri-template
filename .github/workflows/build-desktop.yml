name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            target: 'aarch64-apple-darwin'
            os_name: 'macOS-arm64'
          - platform: 'macos-latest'
            target: 'x86_64-apple-darwin'
            os_name: 'macOS-x64'
          - platform: 'ubuntu-22.04'
            target: ''
            os_name: 'linux'
          - platform: 'ubuntu-22.04'
            target: 'aarch64-linux-android'
            os_name: 'android'
          - platform: 'windows-latest'
            target: ''
            os_name: 'windows'

    runs-on: ${{ matrix.platform }}
    env:
      sign-macos: true

    environment: ${{ matrix.platform == 'macos-latest' && 'macos-signing-secrets' || '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java 17 (Android only)
        if: matrix.os_name == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK (Android only)
        if: matrix.os_name == 'android'
        uses: android-actions/setup-android@v3
      
      - name: Setup Android NDK (Android only)
        if: matrix.os_name == 'android'
        run: |
          ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --install "ndk;25.2.9519653" --sdk_root=${ANDROID_SDK_ROOT}
          echo "ANDROID_NDK_HOME=${ANDROID_SDK_ROOT}/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "NDK_HOME=${ANDROID_SDK_ROOT}/ndk/25.2.9519653" >> $GITHUB_ENV

      - name: Setup Android cross-compilation environment (Android only)
        if: matrix.os_name == 'android'
        run: |
          # 设置 Android 交叉编译环境变量
          echo "CC_aarch64_linux_android=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
          echo "CXX_aarch64_linux_android=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++" >> $GITHUB_ENV
          echo "AR_aarch64_linux_android=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
          
          # 创建 cargo 配置目录
          mkdir -p ~/.cargo
          
          # 创建 cargo 配置文件
          cat > ~/.cargo/config.toml << EOF
          [target.aarch64-linux-android]
          ar = "${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
          linker = "${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
          EOF


      - name: Setup macOS signing (macOS only)
        if: matrix.platform == 'macos-latest' && env.sign-macos
        env:
          # https://tauri.app/distribute/sign/macos/
          # ============ Signing ============
          # https://developer.apple.com/account  -> Certificates, IDs & Profiles -> Certificates -> + -> Developer ID Application
          # Make sure your are choosing the correct certificate Developer ID Application is for MacOS app.
          # "This certificate is used to code sign your app for distribution outside of the Mac App Store Connect." —— Apple
          # After download it, you should receieve something like developerID_application.cer
          # Drag into keychain access, you should see something like Developer ID Application: ... 
          # Right click, export it as .p12 file
          # use apple-certificate.sh to convert it to base64 txt
          # or openssl base64 -in "file.p12" -out "file.txt"
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          # The password of the .p12 file you set when export it from keychain access.
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          # The password of your keychain access, normally your macos computer password.
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          # ============= Notarization ============
          # Apple ID with Apple Developer account
          APPLE_ID: ${{ secrets.APPLE_ID }} 
          # https://account.apple.com/account/manage -> App-specific password -> Generate
          # See Also: https://support.apple.com/zh-cn/102654
          APPLE_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          # https://developer.apple.com/account -> drag down (or just search "Team ID")
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04' && matrix.os_name != 'android'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: Get app version
        id: package-version
        shell: bash # Fix Windows shell issue https://github.com/yiheee-lab/tauri-template/actions/runs/16364222356/job/46237818305
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target || '' }}

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: ${{ runner.os }}-${{ matrix.target || 'native' }}-rust

      - name: Install frontend dependencies
        run: pnpm install

      - name: Build desktop app
        if: matrix.os_name != 'android'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
        with:
          tagName: app-v${{ steps.package-version.outputs.version }}
          releaseName: 'App v${{ steps.package-version.outputs.version }}'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.target && format('--target {0}', matrix.target) || '' }}

      - name: Build Android APK (Android only)
        if: matrix.os_name == 'android'
        run: |
          cd src-tauri
          cargo tauri android build --apk

      - name: Upload Android APK (Android only)
        if: matrix.os_name == 'android'
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: src-tauri/gen/android/app/build/outputs/apk/universal/release/*.apk