name: build-sign-android

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      version:
        required: true
        type: string
      path:
        required: true
        type: string

jobs:
  build-android:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-22.04'
            target: 'aarch64-linux-android'
            os_name: 'android'

    runs-on: ${{ matrix.platform }}
    environment: production

    steps:
        - name: Checkout repository
          uses: actions/checkout@v4
  
        - name: Setup Java 17 (Android only)
          uses: actions/setup-java@v4
          with:
            distribution: 'temurin'
            java-version: '17'
  
        - name: Setup Android SDK (Android only)
          uses: android-actions/setup-android@v3
        
        - name: Setup Android NDK (Android only)
          run: |
            ${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager --install "ndk;25.2.9519653" --sdk_root=${ANDROID_SDK_ROOT}
            echo "ANDROID_NDK_HOME=${ANDROID_SDK_ROOT}/ndk/25.2.9519653" >> $GITHUB_ENV
            echo "NDK_HOME=${ANDROID_SDK_ROOT}/ndk/25.2.9519653" >> $GITHUB_ENV
  
        - name: Setup Android cross-compilation environment (Android only)
          run: |
            # 设置 Android 交叉编译环境变量
            echo "CC_aarch64_linux_android=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
            echo "CXX_aarch64_linux_android=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang++" >> $GITHUB_ENV
            echo "AR_aarch64_linux_android=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
            echo "CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" >> $GITHUB_ENV
            
            # 创建 cargo 配置目录
            mkdir -p ~/.cargo
            
            # 创建 cargo 配置文件
            cat > ~/.cargo/config.toml << EOF
            [target.aarch64-linux-android]
            ar = "${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
            linker = "${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"
            EOF
  
        - uses: pnpm/action-setup@v4
          name: Install pnpm
          with:
            version: 10
            run_install: false
  
        - name: Setup Node.js
          uses: actions/setup-node@v4
          with:
            node-version: lts/*
            cache: 'pnpm'
  
        - name: Install Rust
          uses: dtolnay/rust-toolchain@stable
          with:
            targets: aarch64-linux-android
  
        - name: Cache Rust dependencies
          uses: swatinem/rust-cache@v2
          with:
            workspaces: './src-tauri -> target'
            key: ubuntu-22.04-aarch64-linux-android-rust
            
        - name: Setup Android signing
          env:
            ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
            ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
            ANDROID_KEY_BASE64: ${{ secrets.ANDROID_KEY_BASE64 }}
          run: |
            cd src-tauri/gen/android
            echo "keyAlias=$ANDROID_KEY_ALIAS" > keystore.properties
            echo "password=$ANDROID_KEY_PASSWORD" >> keystore.properties
            base64 -d <<< "$ANDROID_KEY_BASE64" > $RUNNER_TEMP/keystore.jks
            echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties
  
        - name: Install frontend dependencies
          run: pnpm install
        
        - name: Build Android app
          run: |
            pnpm tauri android init
            pnpm tauri android build --apk
            mv src-tauri/gen/android/app/build/outputs/apk/universal/release/*.apk src-tauri/gen/android/app/build/outputs/apk/universal/release/${{inputs.name}}_${{inputs.version}}.apk
  
        - name: Upload artifact
          uses: actions/upload-artifact@v4
          with:
            name: android-apk
            path: src-tauri/gen/android/app/build/outputs/apk/universal/release/${{inputs.name}}_${{inputs.version}}.apk
          
