name: 'Maintenance'

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

env:
  APP_PATH: "./"

jobs:
  # Check for dependency updates
  dependency-updates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Check for npm updates
        run: |
          cd ${{ env.APP_PATH }}
          pnpm install
          pnpm outdated || true

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Check for Rust updates
        run: |
          cd ${{ env.APP_PATH }}/src-tauri
          cargo update --dry-run

  # Security vulnerability scan
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: |
          cd ${{ env.APP_PATH }}
          pnpm install

      - name: Run npm security audit
        run: |
          cd ${{ env.APP_PATH }}
          pnpm audit --audit-level moderate

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run Rust security audit
        run: |
          cd ${{ env.APP_PATH }}/src-tauri
          cargo audit

  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: |
          cd ${{ env.APP_PATH }}
          pnpm install

      - name: Run code quality checks
        run: |
          cd ${{ env.APP_PATH }}
          # Check for unused dependencies
          pnpm dlx depcheck
          
          # Check bundle size
          pnpm build
          du -sh dist/

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust code quality
        run: |
          cd ${{ env.APP_PATH }}/src-tauri
          # Check for unused dependencies
          cargo +nightly udeps || echo "cargo-udeps not available"
          
          # Check binary size
          cargo build --release
          ls -lh target/release/

  # Cleanup old artifacts and caches
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 30
          keep_minimum_runs: 10

  # Maintenance summary
  maintenance-summary:
    needs: [dependency-updates, security-scan, code-quality, cleanup]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Maintenance Summary
        run: |
          echo "## Maintenance Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Task | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Updates | ${{ needs.dependency-updates.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cleanup | ${{ needs.cleanup.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ”§ Maintenance tasks completed on $(date)" >> $GITHUB_STEP_SUMMARY
